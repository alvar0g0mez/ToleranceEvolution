library(tidyr)
library(helperfunctions)
#source("/data/cephfs-1/work/groups/ralser/users/algo12_c/helperfunctions/helperfunctions.R")
# Raw precursor-level report
report_raw <- as.data.frame(fread("/home/alvaro/MyStuff/ToleranceEvo_Wenxi/Data/Raw/report.tsv"))
report_raw_head <- report_raw[1:500,]
# Stats file
stats_file <- as.data.frame(fread("/home/alvaro/MyStuff/ToleranceEvo_Wenxi/Data/Raw/report.stats.tsv"))
# Sample layout
metadata <- as.data.frame(fread("/home/alvaro/MyStuff/ToleranceEvo_Wenxi/Data/metadata/metadata_processed.txt"))
metadata_temp <- metadata %>%
dplyr::select(File.Name, Strain.Name, Analysis.Row, Analysis.Column, Sample.Name, Sample.Type, Strain.Type, Passage, Treatment)
# Add sample layout columns to report and keep only columns of interest
report_raw_matched <- report_raw %>%
dplyr::select(File.Name, Protein.Group, Protein.Ids, Protein.Names, Genes, Modified.Sequence, Stripped.Sequence, Precursor.Id, Precursor.Quantity, Precursor.Normalised, Proteotypic, Q.Value, PG.Q.Value, Global.Q.Value, Global.PG.Q.Value, Lib.Q.Value, RT) %>%
left_join(metadata, by = "File.Name")
report_raw_matched_head <- report_raw_matched[1:500,]
# Add a couple columns of interest to the stats file as well
metadata_temp <- metadata %>%
dplyr::select(File.Name, Strain.Name, Sample.Name, Strain.Type, Passage, Treatment)
stats_file <- left_join(stats_file, metadata_temp, by = "File.Name")
rm(metadata_temp)
# Unique genes
unique_genes <- as.data.frame(fread("/home/alvaro/MyStuff/ToleranceEvo_Wenxi/Data/Raw/report.unique_genes_matrix.tsv"))
Q_values_threshold = 0.01
min_samples_per_strain = 3
percentage_of_samples_per_precursor = 0.65
SD_limit_for_TIC_filtering = 2
quantile_limit_QC_CV = 0.9
changes_log <- tibble(Step_no = numeric(),
Step_description =  character(),
Step_name = character(),
Samples_count =  numeric(),
QCs_count = numeric(),
WTs_count = numeric(),
Excluded_samples_count = numeric(),
Excluded_samples = character(),
Strains_present = numeric(),
Strains_removed = character(),
Report_row_count = numeric(),
Unique_precursor_count = numeric(),
Protein_ID_count = numeric(),
Genes_count = numeric(),
NA_proportion = numeric())
strains_present = unique(report_raw_matched$Strain.Name)
new_row <- tibble(
Step_no = 0,
Step_description = "Starting dataset",
Step_name = "Raw",
Samples_count = length(unique(report_raw_matched$Sample.ID.unique[report_raw_matched$Strain.Name != "WT" & report_raw_matched$Strain.Name != "QC"])),
QCs_count = sum(metadata$Strain.Name == "QC"),
WTs_count = sum(metadata$Strain.Name == "WT"),
Excluded_samples_count = NA,
Excluded_samples = "-",
Strains_present = length(strains_present),
Strains_removed = NA,
Report_row_count = nrow(report_raw_matched),              # What should I do with this??? IÂ´m gonna have the same amount of rows bc those samples are empty lol. Same for the things in the next lines
Unique_precursor_count = length(unique(report_raw_matched$Precursor.Id)),
Protein_ID_count = length(unique(report_raw_matched$Protein.Ids)),
Genes_count = length(unique(report_raw_matched$Genes)),
NA_proportion = check_NA_proportion_in_DIA_NN_report(report_raw_matched))
changes_log <- changes_log %>%
add_row(new_row)
# Create the function which will create the new log row after every filtering step
get_new_row_for_log <- function(step_number,
step_description,
step_name,
old_df,
new_df) {
# Samples removed in this step
excluded_samples <- setdiff(unique(old_df$Sample.Name),
unique(new_df$Sample.Name))
# Strains removed in this step and remaining strains
strains_old <- unique(old_df$Strain.Name)
strains_new <- unique(new_df$Strain.Name)
strains_removed <- strains_old[!(strains_old %in% strains_new)]
# Create new row
new_row <- tibble(
Step_no = step_number,
Step_description = glue(step_description),
Step_name = glue(step_name),
Samples_count = length(unique(new_df$Sample.Name[new_df$Strain.Name != "QC" & new_df$Strain.Name != "WT"])),
QCs_count = length(unique(new_df$Sample.Name[new_df$Strain.Name == "QC"])),
WTs_count = length(unique(new_df$Sample.Name[new_df$Strain.Name == "WT"])),
Excluded_samples_count = length(excluded_samples),
Excluded_samples = paste(excluded_samples, collapse = ", "),
Strains_present = length(strains_new),
Strains_removed = paste(strains_removed, collapse = ", "),
Report_row_count = nrow(new_df),
Unique_precursor_count = length(unique(new_df[["Precursor.Id"]])),
Protein_ID_count = length(unique(new_df$Protein.Ids)),
Genes_count = length(unique(new_df$Genes)),
NA_proportion = check_NA_proportion_in_DIA_NN_report(new_df))
}
# Run filtering
data_filtered_proteotypic <- filter_proteotypic(report_raw_matched)
# Save filtered dataset
#fwrite(data_filtered_proteotypic, "data/filtered/data_filtered_proteoypic.tsv")
new_row <- get_new_row_for_log(1,
step_description = "Removed non-proteotypic precursors",
step_name = "Proteotypicity",
report_raw_matched,
data_filtered_proteotypic)
changes_log <- changes_log %>%
add_row(new_row)
# Run filtering
data_filtered_quantified <- filter_quantified(data_filtered_proteotypic)
# Save filtered dataset
#fwrite(data_filtered_proteotypic, "data/filtered/data_filtered_proteoypic.tsv")
new_row <- get_new_row_for_log(2,
"Removed non quantified precursors",
step_name = "Non-quantified",
data_filtered_proteotypic,
data_filtered_quantified)
changes_log <- changes_log %>%
add_row(new_row)
# Remove already unnecessary version of the report (2 steps ago)
rm(data_filtered_proteotypic)
# Run filtering
q_values_to_filter <- list("Q.Value", "PG.Q.Value", "Global.Q.Value", "Global.PG.Q.Value", "Lib.Q.Value")
data_filtered_Q <- filter_q_values(data = data_filtered_quantified,
threshold = Q_values_threshold,
q_values_to_filter = q_values_to_filter)
# Saved filtered file
#fwrite(data_filtered_Q, "data/filtered/data_filtered_Q.tsv")
new_row <- get_new_row_for_log(3,
"Filtered all precursors with Q-value, PG.Q-Value, Global Q-Value, Global PG.Q-Value or Lib.Q.Value < 0.01",
step_name = "Q-values",
data_filtered_quantified,
data_filtered_Q)
changes_log <- changes_log %>%
add_row(new_row)
# Transform to wide format so I can count the NAs per sample
data_filtered_Q_wide <- data_filtered_Q %>%
dplyr::select(Sample.Name, Precursor.Normalised, Precursor.Id) %>%
pivot_wider(values_from = Precursor.Normalised,
names_from = Sample.Name) %>%
as.data.frame() %>%
set_column_as_rownames(column_name = "Precursor.Id")
# Bring this information of NAs per sample (as well as this as a ratio over the identified precursors) as new columns to the dataset
na_count <- apply(data_filtered_Q_wide, 2, function(x) sum(is.na(x)))
na_count_df <- data.frame(colnames(data_filtered_Q_wide), na_count)
colnames(na_count_df) <- c("Sample.Name", "NA_count")
na_count_df <- na_count_df %>%
dplyr::mutate(Completeness = 1 - (NA_count/nrow(data_filtered_Q_wide)))
# Get the mean intensity column (just mean of Precursor.Normalised after grouping by Sample.Name)
data_filtered_Q_test <- left_join(data_filtered_Q, na_count_df, by = "Sample.Name") %>%
group_by(Sample.Name) %>%
dplyr::mutate(mean_Intensity = log2(mean(Precursor.Normalised))) %>%
ungroup()
# Plot completeness vs. mean intensity
ggplot(data = data_filtered_Q_test, aes(x = mean_Intensity, y = Completeness, col = Injection)) +
geom_point() +
theme_light() +
scale_color_viridis_c() +
xlab("mean Intensity")
start.time <- Sys.time()
CV_data <- data_filtered_Q_test %>%
dplyr::group_by(Strain.Name, Precursor.Id) %>%
dplyr::mutate("CV_strain" = sd(Precursor.Normalised, na.rm = T)/mean(Precursor.Normalised, na.rm = T)) %>%
dplyr::ungroup() %>%
dplyr::group_by(Precursor.Id) %>%
dplyr::mutate("CV_all_samples" = sd(Precursor.Normalised, na.rm = T)/mean(Precursor.Normalised, na.rm = T)) %>%
dplyr::ungroup() %>%
dplyr::group_by(Treatment, Precursor.Id) %>%
dplyr::mutate("CV_treatment" = sd(Precursor.Normalised, na.rm = T)/mean(Precursor.Normalised, na.rm = T)) %>%
dplyr::group_by(Passage, Precursor.Id) %>%
dplyr::mutate("CV_passage" = sd(Precursor.Normalised, na.rm = T)/mean(Precursor.Normalised, na.rm = T)) %>%
dplyr::group_by(Strain.Type, Precursor.Id) %>%
dplyr::mutate("CV_strain_type" = sd(Precursor.Normalised, na.rm = T)/mean(Precursor.Normalised, na.rm = T)) %>%
dplyr::ungroup() %>%
dplyr::mutate(QC_or_not = case_when(Strain.Name == "QC" ~ "QC",
TRUE ~ "Biological replicates"))
end.time <- Sys.time()
time.taken <- end.time - start.time
glue("Time taken to create CV data: {time.taken}")
CV_data_long <- bind_rows(
CV_data %>%
filter(QC_or_not == "QC") %>%
transmute(Group = "QC", CV = CV_strain),
CV_data %>%
filter(QC_or_not == "Biological replicates") %>%
transmute(Group = "Biological replicates", CV = CV_strain),
CV_data %>%
transmute(Group = "All samples", CV = CV_all_samples))
CV_data_long_treatment <- CV_data %>%
dplyr::select(CV_treatment, Treatment, Precursor.Id)
# CV per treatment group
CV_data %>%
dplyr::filter(Treatment != "QC") %>%
ggplot(aes(x = Treatment, y = CV_treatment, group = Treatment)) +
geom_boxplot() +
scale_fill_viridis_d() +
theme_light()
# CV per strain type
CV_data %>%
dplyr::filter(Strain.Type != "QC") %>%
ggplot(aes(x = Strain.Type, y = CV_per_sample, group = Strain.Type)) +
geom_boxplot() +
theme_light()
# CV per strain type
CV_data %>%
dplyr::filter(Strain.Type != "QC") %>%
ggplot(aes(x = Strain.Type, y = CV_strain_type, group = Strain.Type)) +
geom_boxplot() +
theme_light()
# CV per treatment group
CV_data %>%
dplyr::filter(Treatment != "QC") %>%
ggplot(aes(x = Treatment, y = CV_treatment, group = Treatment, col = Treatment)) +
geom_violin() +
scale_fill_viridis_d() +
theme_light()
# CV per strain type
CV_data %>%
dplyr::filter(Strain.Type != "QC") %>%
ggplot(aes(x = Strain.Type, y = CV_strain_type, group = Strain.Type, col = Strain.Type)) +
geom_violin() +
theme_light()
# CV per passage
CV_data %>%
dplyr::filter(Passage != "QC") %>%
ggplot(aes(x = Passage, y = CV_passage, group = Passage, color = Passage)) +
geom_violin() +
theme_light()
# CV comparison: per strain (across biological replicates), across all strains, and across CVs
ggplot() +
geom_violin(data = subset(CV_data, QC_or_not == "QC"), aes(x = 1, y = CV_strain)) +
geom_violin(data = subset(CV_data, QC_or_not == "Biological replicates"), aes(x = 2, y = CV_strain)) +
geom_violin(data = CV_data, aes(x = 3, y = CV_all_samples)) +
scale_fill_viridis_d() +
theme_light()
# CV per treatment group
CV_data %>%
dplyr::filter(Treatment != "QC") %>%
ggplot(aes(x = Treatment, y = CV_treatment, group = Treatment, fill = Treatment)) +
geom_violin() +
scale_fill_viridis_d() +
theme_light()
# CV per strain type
CV_data %>%
dplyr::filter(Strain.Type != "QC") %>%
ggplot(aes(x = Strain.Type, y = CV_strain_type, group = Strain.Type, fill = Strain.Type)) +
geom_violin() +
theme_light()
# CV per passage
CV_data %>%
dplyr::filter(Passage != "QC") %>%
ggplot(aes(x = Passage, y = CV_passage, group = Passage, fill = Passage)) +
geom_violin() +
theme_light()
# CV comparison: per strain (across biological replicates), across all strains, and across CVs
ggplot() +
geom_violin(data = subset(CV_data, QC_or_not == "QC"), aes(x = 1, y = CV_strain)) +
geom_violin(data = subset(CV_data, QC_or_not == "Biological replicates"), aes(x = 2, y = CV_strain)) +
geom_violin(data = CV_data, aes(x = 3, y = CV_all_samples)) +
scale_fill_viridis_d() +
theme_light()
View(CV_data_long_treatment)
start.time <- Sys.time()
CV_data <- data_filtered_Q_test %>%
dplyr::group_by(Strain.Name, Precursor.Id) %>%
dplyr::mutate("CV_strain" = sd(Precursor.Normalised, na.rm = T)/mean(Precursor.Normalised, na.rm = T)) %>%
dplyr::ungroup() %>%
dplyr::group_by(Precursor.Id) %>%
dplyr::mutate("CV_all_samples" = sd(Precursor.Normalised, na.rm = T)/mean(Precursor.Normalised, na.rm = T)) %>%
dplyr::ungroup() %>%
dplyr::group_by(Treatment, Precursor.Id) %>%
dplyr::mutate("CV_treatment" = sd(Precursor.Normalised, na.rm = T)/mean(Precursor.Normalised, na.rm = T)) %>%
dplyr::group_by(Passage, Precursor.Id) %>%
dplyr::mutate("CV_passage" = sd(Precursor.Normalised, na.rm = T)/mean(Precursor.Normalised, na.rm = T)) %>%
dplyr::group_by(Strain.Type, Precursor.Id) %>%
dplyr::mutate("CV_strain_type" = sd(Precursor.Normalised, na.rm = T)/mean(Precursor.Normalised, na.rm = T)) %>%
dplyr::ungroup() %>%
dplyr::mutate(QC_or_not = case_when(Strain.Name == "QC" ~ "QC",
TRUE ~ "Biological replicates"))
end.time <- Sys.time()
time.taken <- end.time - start.time
glue("Time taken to create CV data: {time.taken} seconds")
# Turn CV data into long format in order to plot easily
CV_data_long <- bind_rows(CV_data %>%
filter(QC_or_not == "QC") %>%
transmute(Group = "QC", CV = CV_strain),
CV_data %>%
filter(QC_or_not == "Biological replicates") %>%
transmute(Group = "Biological replicates", CV = CV_strain),
CV_data %>%
transmute(Group = "All samples", CV = CV_all_samples))
View(CV_data_long)
# CV comparison: per strain (across biological replicates), across all strains, and across CVs
ggplot(data = CV_data_long, aes(x = Group, y = CV, fill = Group)) +
scale_fill_viridis_d() +
theme_light()
# CV comparison: per strain (across biological replicates), across all strains, and across CVs
ggplot(data = CV_data_long, aes(x = Group, y = CV, fill = Group)) +
geom_violin() +
scale_fill_viridis_d() +
theme_light()
# CV comparison: per strain (across biological replicates), across all strains, and across CVs
ggplot(data = CV_data_long, aes(x = Group, y = CV, fill = Group)) +
geom_violin(draw_quantiles = c(0.5)) +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "Coefficient of variation")
# CV comparison: per strain (across biological replicates), across all strains, and across CVs
ggplot(data = CV_data_long, aes(x = Group, y = CV, fill = Group)) +
geom_violin(quantiles.linetype = c(0.5)) +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "Coefficient of variation")
# CV comparison: per strain (across biological replicates), across all strains, and across CVs
ggplot(data = CV_data_long, aes(x = Group, y = CV, fill = Group)) +
geom_violin(draw_quantiles = c(0.5)) +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "Coefficient of variation")
# CV comparison: per strain (across biological replicates), across all strains, and across CVs
ggplot(data = CV_data_long, aes(x = Group, y = CV, fill = Group)) +
geom_violin(draw_quantiles = c(0.5)) +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "CV",
title = "CV across different types of samples")
# CV per treatment group
CV_data %>%
dplyr::filter(Treatment != "QC") %>%
ggplot(aes(x = Treatment, y = CV_treatment, group = Treatment, fill = Treatment)) +
geom_violin() +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "CV",
title = "CV across treatment groups")
# CV per strain type
CV_data %>%
dplyr::filter(Strain.Type != "QC") %>%
ggplot(aes(x = Strain.Type, y = CV_strain_type, group = Strain.Type, fill = Strain.Type)) +
geom_violin() +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "CV",
title = "CV across strains")
# CV per passage
CV_data %>%
dplyr::filter(Passage != "QC") %>%
ggplot(aes(x = Passage, y = CV_passage, group = Passage, fill = Passage)) +
geom_violin() +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "CV",
title = "CV across passages")
# CV comparison: per strain (across biological replicates), across all strains, and across CVs
ggplot(data = CV_data_long, aes(x = Group, y = CV, fill = Group)) +
geom_violin(draw_quantiles = c(0.5)) +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "CV",
title = "CV across different types of samples")
# Print the median CV across the QC samples - this is a reference of the quality of the whole dataset
CV_data_long %>%
dplyr::filter(Group == "QC") %>%
median(CV)
# Print the median CV across the QC samples - this is a reference of the quality of the whole dataset
nedian(CV_data_long$CV[CV_data_long$Group == "QC"])
# Print the median CV across the QC samples - this is a reference of the quality of the whole dataset
median(CV_data_long$CV[CV_data_long$Group == "QC"])
# Print the median CV across the QC samples - this is a reference of the quality of the whole dataset
median(CV_data_long$CV[CV_data_long$Group == "QC"], na.omit = T)
# Print the median CV across the QC samples - this is a reference of the quality of the whole dataset
median(CV_data_long$CV[CV_data_long$Group == "QC"], na.rm = T)
# CV per treatment group
CV_data %>%
dplyr::filter(Treatment != "QC") %>%
ggplot(aes(x = Treatment, y = CV_treatment, group = Treatment, fill = Treatment)) +
geom_violin(draw_quantiles = c(0.5)) +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "CV",
title = "CV across treatment groups")
# CV per strain type
CV_data %>%
dplyr::filter(Strain.Type != "QC") %>%
ggplot(aes(x = Strain.Type, y = CV_strain_type, group = Strain.Type, fill = Strain.Type)) +
geom_violin(draw_quantiles = c(0.5)) +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "CV",
title = "CV across strains")
# CV per passage
CV_data %>%
dplyr::filter(Passage != "QC") %>%
ggplot(aes(x = Passage, y = CV_passage, group = Passage, fill = Passage)) +
geom_violin(draw_quantiles = c(0.5)) +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "CV",
title = "CV across passages")
# CV per treatment+strain type+passage
CV_data %>%
ggplot(aes(x = Strain.Name, y = CV_strain, group = Strain.Name, fill = Strain.Name)) +
geom_violin(draw_quantiles = c(0.5)) +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "CV",
title = "CV across all conditions")
# CV comparison: per strain (across biological replicates), across all strains, and across CVs
ggplot(data = CV_data_long, aes(x = Group, y = CV, fill = Group)) +
geom_violin(draw_quantiles = c(0.5)) +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "CV",
title = "CV across different types of samples")
# Print the median CV across the QC samples - this is a reference of the quality of the whole dataset
median(CV_data_long$CV[CV_data_long$Group == "QC"], na.rm = T)
# CV per treatment group
CV_data %>%
ggplot(aes(x = Treatment, y = CV_treatment, group = Treatment, fill = Treatment)) +
geom_violin(draw_quantiles = c(0.5)) +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "CV",
title = "CV across treatment groups")
# CV per strain type
CV_data %>%
ggplot(aes(x = Strain.Type, y = CV_strain_type, group = Strain.Type, fill = Strain.Type)) +
geom_violin(draw_quantiles = c(0.5)) +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "CV",
title = "CV across strains")
# CV per passage
CV_data %>%
ggplot(aes(x = Passage, y = CV_passage, group = Passage, fill = Passage)) +
geom_violin(draw_quantiles = c(0.5)) +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "CV",
title = "CV across passages")
# CV per treatment+strain type+passage
CV_data %>%
ggplot(aes(x = Strain.Name, y = CV_strain, group = Strain.Name, fill = Strain.Name)) +
geom_violin(draw_quantiles = c(0.5)) +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "CV",
title = "CV across all conditions") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# CV comparison: per strain (across biological replicates), across all strains, and across CVs
ggplot(data = CV_data_long, aes(x = Group, y = CV, fill = Group)) +
geom_violin(draw_quantiles = c(0.5)) +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "CV",
title = "CV across different types of samples")
# Print the median CV across the QC samples - this is a reference of the quality of the whole dataset
median(CV_data_long$CV[CV_data_long$Group == "QC"], na.rm = T)
View(na_count_df)
# How about completeness vs. injection order?
metadata <- left_join(metadata, na_count_df, by = "Sample.Name")
ggplot(data = metadata, aes(x = Injection, y = NA_count)) +
geom_point() +
theme_light()
ggplot(data = data_filtered_Q_test, aes(x = mean_Intensity, y = Completeness, col = Injection)) +
geom_point() +
theme_light() +
scale_color_viridis_c() +
xlab("mean Intensity")
# How about completeness vs. injection order? - didn't realize this information was already in the coloring of the previous plot
metadata <- left_join(metadata, na_count_df, by = "Sample.Name")
ggplot(data = metadata, aes(x = Injection, y = NA_count)) +
geom_point() +
theme_light()
# Add a couple columns of interest to the stats file as well
metadata_temp <- metadata %>%
dplyr::select(File.Name, Strain.Name, Sample.Name, Strain.Type, Passage, Treatment)
# How about completeness vs. injection order? - didn't realize this information was already in the coloring of the previous plot
metadata_na_count <- left_join(metadata, na_count_df, by = "Sample.Name")
ggplot(data = metadata_na_count, aes(x = Injection, y = NA_count)) +
geom_point() +
theme_light()
ggplot(data = metadata_na_count, aes(x = Strain.Type, y = Completeness)) +
geom_boxplot() +
theme_light()
# By Strain.Type
ggplot(data = metadata_na_count, aes(x = Strain.Type, y = Completeness)) +
geom_boxplot() +
theme_light()
# By Passage
ggplot(data = metadata_na_count, aes(x = Passage, y = Completeness)) +
geom_boxplot() +
theme_light()
# By Treatment
ggplot(data = metadata_na_count, aes(x = Treatment, y = Completeness)) +
geom_boxplot() +
theme_light()
