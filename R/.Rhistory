# Metadata
metadata <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/metadata/metadata_processed.txt", sep="")))
# Correspondence between precursor IDs and protein IDs (UniProt)
precursor_protein_correspondence <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/Preprocessing_steps/precursor_protein_correspondence.tsv", sep="")))
# UniProt dataframe
uniprot_db <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/uniprotkb_proteome_UP000002311_2025_05_24.tsv", sep="")))
# Prepare protein ID vector matching the precursor order in the rows of the raw data
## Set the order based on that of the rows of the precursor raw data
precursor_protein_correspondence <- precursor_protein_correspondence %>%
dplyr::filter(Precursor.Id %in% rownames(raw_prec_data))
precursor_protein_correspondence <- precursor_protein_correspondence[match(rownames(raw_prec_data), precursor_protein_correspondence$Precursor.Id),]
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(data.table)
library(limpa)
library(helperfunctions)
library(preprocessCore)
library(proDA)
working_from <- "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Precursor data wide format
raw_prec_data <- as.matrix(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/Preprocessing_steps/report_wide_filtered_norm_drift_corrected_log2.csv", sep="")), rownames = 1)
# Metadata
metadata <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/metadata/metadata_processed.txt", sep="")))
# Correspondence between precursor IDs and protein IDs (UniProt)
precursor_protein_correspondence <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/Preprocessing_steps/precursor_protein_correspondence.tsv", sep="")))
# UniProt dataframe
uniprot_db <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/uniprotkb_proteome_UP000002311_2025_05_24.tsv", sep="")))
# Prepare protein ID vector matching the precursor order in the rows of the raw data
## Set the order based on that of the rows of the precursor raw data
precursor_protein_correspondence <- precursor_protein_correspondence %>%
dplyr::filter(Precursor.Id %in% rownames(raw_prec_data))
precursor_protein_correspondence <- precursor_protein_correspondence[match(rownames(raw_prec_data), precursor_protein_correspondence$Precursor.Id),]
# Run summarization
protein_mat <- protein_summarize(DM = raw_prec_data,
protein_ids = precursor_protein_correspondence$Protein.Ids,
method = "limpa")
gc()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(data.table)
library(limpa)
library(helperfunctions)
library(preprocessCore)
library(proDA)
working_from <- "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Precursor data wide format
raw_prec_data <- as.matrix(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/Preprocessing_steps/report_wide_filtered_norm_drift_corrected_log2.csv", sep="")), rownames = 1)
# Metadata
metadata <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/metadata/metadata_processed.txt", sep="")))
# Correspondence between precursor IDs and protein IDs (UniProt)
precursor_protein_correspondence <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/Preprocessing_steps/precursor_protein_correspondence.tsv", sep="")))
# UniProt dataframe
uniprot_db <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/uniprotkb_proteome_UP000002311_2025_05_24.tsv", sep="")))
# Prepare protein ID vector matching the precursor order in the rows of the raw data
## Set the order based on that of the rows of the precursor raw data
precursor_protein_correspondence <- precursor_protein_correspondence %>%
dplyr::filter(Precursor.Id %in% rownames(raw_prec_data))
precursor_protein_correspondence <- precursor_protein_correspondence[match(rownames(raw_prec_data), precursor_protein_correspondence$Precursor.Id),]
# Run summarization
protein_mat <- protein_summarize(raw_data = raw_prec_data,
protein_ids = precursor_protein_correspondence$Protein.Ids,
method = "limpa")
sum(is.na(precursor_protein_correspondence$Protein.Ids))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(data.table)
library(limpa)
library(helperfunctions)
library(preprocessCore)
library(proDA)
working_from <- "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Precursor data wide format
raw_prec_data <- as.matrix(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/Preprocessing_steps/report_wide_filtered_norm_fully_imputed_drift_corrected_log2.csv", sep="")), rownames = 1)
# Metadata
metadata <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/metadata/metadata_processed.txt", sep="")))
# Correspondence between precursor IDs and protein IDs (UniProt)
precursor_protein_correspondence <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/Preprocessing_steps/precursor_protein_correspondence.tsv", sep="")))
# UniProt dataframe
uniprot_db <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/uniprotkb_proteome_UP000002311_2025_05_24.tsv", sep="")))
# Prepare protein ID vector matching the precursor order in the rows of the raw data
## Set the order based on that of the rows of the precursor raw data
precursor_protein_correspondence <- precursor_protein_correspondence %>%
dplyr::filter(Precursor.Id %in% rownames(raw_prec_data))
precursor_protein_correspondence <- precursor_protein_correspondence[match(rownames(raw_prec_data), precursor_protein_correspondence$Precursor.Id),]
# Run summarization
protein_mat <- protein_summarize(raw_data = raw_prec_data,
protein_ids = precursor_protein_correspondence$Protein.Ids,
method = "limpa")
# Run differential expression analysis
## I am not sure how to do this! Should I check DE for all strains w.r.t. to a single baseline one? Or should I do it separately for each culture method (pellet, liquid, liquid+fluconazole)??? For now I am going to run it once for all strains with C0L (lab strain, passage 0, liquid media) as a reference and see what happens
de_analysis_results <- de_analysis(raw_data = protein_mat$y.protein,
metadata = metadata,
method = "limpa",
strain_name_column = "Strain.Name",
sample_name_column = "Sample.Name",
reference_strain = "C0L")
View(de_analysis_results)
da <- de_analysis_results$DE_df
View(da)
da_test <- da %>% dplyr::mutate(!!sym(strain_name_column) = substr(!!sym(strain_name_column), 0, str_locate(!!sym(strain_name_column), "-")))
da_test <- da %>% dplyr::mutate(
!!sym(strain_name_column) := substr(
!!sym(strain_name_column),
0,
str_locate(!!sym(strain_name_column), "-")[, 1]
)
)
strain_name_column = "Strain.Name"
da_test <- da %>% dplyr::mutate(
!!sym(strain_name_column) := substr(
!!sym(strain_name_column),
0,
str_locate(!!sym(strain_name_column), "-")[, 1]
)
)
library(stringr)
da_test <- da %>% dplyr::mutate(
!!sym(strain_name_column) := substr(
!!sym(strain_name_column),
0,
str_locate(!!sym(strain_name_column), "-")[, 1]
)
)
View(da_test)
da_test <- da %>% dplyr::mutate(
!!sym(strain_name_column) := substr(
!!sym(strain_name_column),
0,
str_locate(!!sym(strain_name_column), "-")[, 1]-1
)
)
sum(da$adj.P.Val < 0.05 & abs(da$logFC) > 1)
responsiveness <- da %>%
group_by(Strain.Name) %>%
summarise(nDEP = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha, na.rm = T),
Up_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Up_regulated", na.rm = T),
Down_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Down_regulated", na.rm = T),
Up_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Up_regulated", na.rm = T),
Down_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Down_regulated", na.rm = T),
Replicate_num = mean(Replicate_num))
lfc_threshold <- 0.5
alpha <- 0.05
responsiveness <- da %>%
group_by(Strain.Name) %>%
summarise(nDEP = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha, na.rm = T),
Up_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Up_regulated", na.rm = T),
Down_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Down_regulated", na.rm = T),
Up_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Up_regulated", na.rm = T),
Down_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Down_regulated", na.rm = T),
Replicate_num = mean(Replicate_num))
View(raw_prec_data)
hist(raw_prec_data)
test <- as.data.frame(fread("C:/MyStuff/ToleranceEvo_Wenxi/Data/Preprocessing_steps/report_wide_filtered_norm_log2.csv"))
View(test)
test <- as.data.frame(as.matrix(fread("C:/MyStuff/ToleranceEvo_Wenxi/Data/Preprocessing_steps/report_wide_filtered_norm_log2.csv"), rownames = 1))
View(test)
hist(test)
test <- as.matrix(fread("C:/MyStuff/ToleranceEvo_Wenxi/Data/Preprocessing_steps/report_wide_filtered_norm_log2.csv"), rownames = 1)
hist(test)
log2(14)
test <- as.matrix(fread("C:/MyStuff/ToleranceEvo_Wenxi/Data/Preprocessing_steps/report_wide_filtered_norm_log2.csv"), rownames = 1)
hist(test)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(data.table)
library(limpa)
library(helperfunctions)
library(preprocessCore)
library(proDA)
working_from <- "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Precursor data wide format
raw_prec_data <- as.matrix(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/Preprocessing_steps/report_wide_filtered_norm_fully_imputed_drift_corrected_log2.csv", sep="")), rownames = 1)
hist(raw_prec_data)
# Metadata
metadata <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/metadata/metadata_processed.txt", sep="")))
# Correspondence between precursor IDs and protein IDs (UniProt)
precursor_protein_correspondence <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/Preprocessing_steps/precursor_protein_correspondence.tsv", sep="")))
# UniProt dataframe
uniprot_db <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/uniprotkb_proteome_UP000002311_2025_05_24.tsv", sep="")))
precursor_protein_correspondence <- precursor_protein_correspondence %>%
dplyr::filter(Precursor.Id %in% rownames(raw_prec_data))
precursor_protein_correspondence <- precursor_protein_correspondence[match(rownames(raw_prec_data), precursor_protein_correspondence$Precursor.Id),]
# Run summarization
protein_mat <- protein_summarize(raw_data = raw_prec_data,
protein_ids = precursor_protein_correspondence$Protein.Ids,
method = "limpa")
de_analysis_results <- de_analysis(raw_data = protein_mat$y.protein,
metadata = metadata,
method = "limpa",
strain_name_column = "Strain.Name",
sample_name_column = "Sample.Name",
reference_strain = "C0L")
da <- de_analysis_results$DE_df
View(da)
sum(da$diffexpressed_adjusted != "Not_significant")
lfc_threshold <- 0.5
alpha <- 0.05
responsiveness <- da %>%
group_by(Strain.Name) %>%
summarise(nDEP = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha, na.rm = T),
Up_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Up_regulated", na.rm = T),
Down_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Down_regulated", na.rm = T),
Up_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Up_regulated", na.rm = T),
Down_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Down_regulated", na.rm = T),
Replicate_num = mean(Replicate_num))
gc()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(data.table)
library(limpa)
library(helperfunctions)
library(preprocessCore)
library(proDA)
working_from <- "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Precursor data wide format
raw_prec_data <- as.matrix(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/Preprocessing_steps/report_wide_filtered_norm_fully_imputed_drift_corrected_log2.csv", sep="")), rownames = 1)
hist(raw_prec_data)
# Metadata
metadata <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/metadata/metadata_processed.txt", sep="")))
# Correspondence between precursor IDs and protein IDs (UniProt)
precursor_protein_correspondence <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/Preprocessing_steps/precursor_protein_correspondence.tsv", sep="")))
# UniProt dataframe
uniprot_db <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/uniprotkb_proteome_UP000002311_2025_05_24.tsv", sep="")))
# Prepare protein ID vector matching the precursor order in the rows of the raw data
## Set the order based on that of the rows of the precursor raw data
precursor_protein_correspondence <- precursor_protein_correspondence %>%
dplyr::filter(Precursor.Id %in% rownames(raw_prec_data))
precursor_protein_correspondence <- precursor_protein_correspondence[match(rownames(raw_prec_data), precursor_protein_correspondence$Precursor.Id),]
# Run summarization
protein_mat <- protein_summarize(raw_data = raw_prec_data,
protein_ids = precursor_protein_correspondence$Protein.Ids,
method = "limpa")
# Remove proteins which are present in less than 65% of the samples per strain
#protein_mat <- as.data.frame(protein_mat)
#protein_mat$Precursor.Id <- rownames(protein_mat)
#protein_mat <- pivot_longer(protein_mat,                                                  # Switch to longer format for filtering
#                                 cols = !Precursor.Id,
#                                 names_to = "Strain.Name",
#                                 values_to = "Protein.Intensity") %>%
#  dplyr::filter(!is.na(Protein.Intensity)) %>%                                            # Remove rows with NAs, otherwise this filtering doesn't work (it's based on the     #                                                                                          row being present or not, not on its contents)
#  remove_uncommon_precursors_per_strain(percentage_of_samples_per_precursor = 0.65) %>%   # Filter
#  pivot_wider(names_from = "Strain.Name",                                                 # Set back to wide format
#              values_from = "Protein.Intensity") %>%
#  as.data.frame() %>%
#  set_column_as_rownames("Precursor.Id")
#sum(is.na(protein_mat))
#sum(is.na(protein_mat))/(ncol(protein_mat)*nrow(protein_mat))
# Run differential expression analysis
## I am not sure how to do this! Should I check DE for all strains w.r.t. to a single baseline one? Or should I do it separately for each culture method (pellet, liquid, liquid+fluconazole)??? For now I am going to run it once for all strains with C0L (lab strain, passage 0, liquid media) as a reference and see what happens
de_analysis_results <- de_analysis(raw_data = protein_mat$y.protein,
metadata = metadata,
method = "limpa",
strain_name_column = "Strain.Name",
sample_name_column = "Sample.Name",
reference_strain = "C0L")
library(stringr)
# Run differential expression analysis
## I am not sure how to do this! Should I check DE for all strains w.r.t. to a single baseline one? Or should I do it separately for each culture method (pellet, liquid, liquid+fluconazole)??? For now I am going to run it once for all strains with C0L (lab strain, passage 0, liquid media) as a reference and see what happens
de_analysis_results <- de_analysis(raw_data = protein_mat$y.protein,
metadata = metadata,
method = "limpa",
strain_name_column = "Strain.Name",
sample_name_column = "Sample.Name",
reference_strain = "C0L")
raw_data = protein_mat$y.protein
metadata = metadata
method = "limma"
strain_name_column = "Strain.Name"
sample_name_column = "Sample.Name"
reference_strain = "C0L"
lfc_threshold = 1
alpha = 0.05
if (method == "limpa") {
y.protein <- raw_data
raw_data <- y.protein$E
}
# Generate the design matrix
## Get the names of all strains, and set the reference strain
my_levels <- c()
for (i in 1:ncol(raw_data)) {
sample_name <- colnames(raw_data)[i]
strain_name <- metadata[[strain_name_column]][metadata[[sample_name_column]] == sample_name]
if (length(strain_name) > 1) {
strain_name <- strain_name[1]
}
my_levels <- c(my_levels, strain_name)
}
my_levels <- as.factor(my_levels)
my_levels <- relevel(my_levels, ref = reference_strain)
## Generate design matrix
mm <- model.matrix(~ 0 + my_levels)
colnames(mm) <- levels(my_levels)
# Fit linear models
fit <- switch(
method,
"limma" = lmFit(raw_data, mm),
"limpa" = dpcDE(y.protein, mm),
"proDA" = proDA(raw_data, mm)
)
# Create contrasts - we remove the contrast of the reference strain to itself
treatments <- colnames(fit$coefficients)
design <- model.matrix(~ 0 + treatments)
colnames(design) <- treatments
contrast_list <- paste0(treatments, "-", reference_strain)
contrast_list <- contrast_list[!(contrast_list %in% c(paste(reference_strain, "-", reference_strain, sep="")))]
# Introduce the contrasts and run eBayes for them, 10 at a time - this batches helps with the issues estimating variability I think?
da <- list()
batch_size <- N
N = 10
if (method == "limpa") {
y.protein <- raw_data
raw_data <- y.protein$E
}
# Generate the design matrix
## Get the names of all strains, and set the reference strain
my_levels <- c()
for (i in 1:ncol(raw_data)) {
sample_name <- colnames(raw_data)[i]
strain_name <- metadata[[strain_name_column]][metadata[[sample_name_column]] == sample_name]
if (length(strain_name) > 1) {
strain_name <- strain_name[1]
}
my_levels <- c(my_levels, strain_name)
}
my_levels <- as.factor(my_levels)
my_levels <- relevel(my_levels, ref = reference_strain)
## Generate design matrix
mm <- model.matrix(~ 0 + my_levels)
colnames(mm) <- levels(my_levels)
# Fit linear models
fit <- switch(
method,
"limma" = lmFit(raw_data, mm),
"limpa" = dpcDE(y.protein, mm),
"proDA" = proDA(raw_data, mm)
)
# Create contrasts - we remove the contrast of the reference strain to itself
treatments <- colnames(fit$coefficients)
design <- model.matrix(~ 0 + treatments)
colnames(design) <- treatments
contrast_list <- paste0(treatments, "-", reference_strain)
contrast_list <- contrast_list[!(contrast_list %in% c(paste(reference_strain, "-", reference_strain, sep="")))]
# Introduce the contrasts and run eBayes for them, 10 at a time - this batches helps with the issues estimating variability I think?
da <- list()
batch_size <- N
n_batches <- ceiling(ncol(fit$coefficients)/batch_size)
for (i in 1:n_batches) {
contrast_subset <- contrast_list[((i - 1) * batch_size + 1):min(i * batch_size, length(contrast_list))]
contrast.matrix <- makeContrasts(contrasts = contrast_subset, levels = design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit3 <- eBayes(fit2, robust = TRUE, trend = TRUE)
new_contrast_names <- c()
# Store topTables for each contrast
for (contrast_name in colnames(contrast.matrix)) {
da[[contrast_name]] <- topTable(fit3, coef = contrast_name, adjust.method = 'BH', number = Inf, sort.by = 'none')
da[[contrast_name]][[strain_name_column]] <- rep(contrast_name, nrow(da[[contrast_name]]))
}
}
# Here we have a topTable per strain - now join them all and filter to keep only significantly DE proteins
## With a fixed logFC threshold
da <- bind_rows(da) %>%
dplyr::mutate(protein = rep(rownames(da[[1]]), times = length(da))) %>%
dplyr::distinct(!!sym(strain_name_column), protein, logFC, .keep_all = T)
temp <- metadata %>%
dplyr::distinct(!!sym(strain_name_column), .keep_all = T)
da <- left_join(da, temp, by = strain_name_column) %>%
dplyr::relocate(!!sym(strain_name_column), .before = logFC) %>%
dplyr::relocate(protein, .after = !!sym(strain_name_column)) %>%
dplyr::filter(!!sym(strain_name_column) != "WT")
da <- da %>%
dplyr::select(protein, !!sym(strain_name_column), logFC, P.Value, adj.P.Val) %>%                              # From here on in this function it's added by me
dplyr::mutate(diffexpressed_adjusted = case_when((logFC > lfc_threshold) & (adj.P.Val < alpha) ~ "Up_regulated",
(logFC < -lfc_threshold) & (adj.P.Val < alpha) ~ "Down_regulated",
TRUE ~ "Not_significant"),
diffexpressed_non_adjusted = case_when((logFC > lfc_threshold) & (P.Value < alpha) ~ "Up_regulated",
(logFC < -lfc_threshold) & (P.Value < alpha) ~ "Down_regulated",
TRUE ~ "Not_significant"))
da <- da %>%
dplyr::distinct(!!sym(strain_name_column), protein, logFC, .keep_all = T) %>%
dplyr::mutate(
!!sym(strain_name_column) := substr(
!!sym(strain_name_column),
0,
str_locate(!!sym(strain_name_column), "-")[, 1]-1
)
)
# Add a column to the da dataframe with the number of replicates per strain - NOT TESTED YET
unique_strains <- unique(da[[strain_name_column]])
replicates <- c()
for (i in 1:length(unique_strains)) {
strain <- unique_strains[i]
replicates <- c(replicates, sum(grepl(strain, colnames(raw_data), fixed = T)))
}
strain_replicates <- data.frame(unique_strains, replicates)
colnames(strain_replicates) <- c(strain_name_column, "Replicate_num")
da <- merge(da, strain_replicates, by = get(strain_name_column))
View(strain_replicates)
View(da)
da <- merge(da, strain_replicates, by = strain_name_column)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(data.table)
library(limpa)
library(helperfunctions)
library(preprocessCore)
library(proDA)
library(stringr)
working_from <- "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Precursor data wide format
raw_prec_data <- as.matrix(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/Preprocessing_steps/report_wide_filtered_norm_fully_imputed_drift_corrected_log2.csv", sep="")), rownames = 1)
hist(raw_prec_data)
# Metadata
metadata <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/metadata/metadata_processed.txt", sep="")))
# Correspondence between precursor IDs and protein IDs (UniProt)
precursor_protein_correspondence <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/Preprocessing_steps/precursor_protein_correspondence.tsv", sep="")))
# UniProt dataframe
uniprot_db <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/uniprotkb_proteome_UP000002311_2025_05_24.tsv", sep="")))
# Prepare protein ID vector matching the precursor order in the rows of the raw data
## Set the order based on that of the rows of the precursor raw data
precursor_protein_correspondence <- precursor_protein_correspondence %>%
dplyr::filter(Precursor.Id %in% rownames(raw_prec_data))
precursor_protein_correspondence <- precursor_protein_correspondence[match(rownames(raw_prec_data), precursor_protein_correspondence$Precursor.Id),]
# Run summarization
protein_mat <- protein_summarize(raw_data = raw_prec_data,
protein_ids = precursor_protein_correspondence$Protein.Ids,
method = "limpa")
# Remove proteins which are present in less than 65% of the samples per strain
#protein_mat <- as.data.frame(protein_mat)
#protein_mat$Precursor.Id <- rownames(protein_mat)
#protein_mat <- pivot_longer(protein_mat,                                                  # Switch to longer format for filtering
#                                 cols = !Precursor.Id,
#                                 names_to = "Strain.Name",
#                                 values_to = "Protein.Intensity") %>%
#  dplyr::filter(!is.na(Protein.Intensity)) %>%                                            # Remove rows with NAs, otherwise this filtering doesn't work (it's based on the     #                                                                                          row being present or not, not on its contents)
#  remove_uncommon_precursors_per_strain(percentage_of_samples_per_precursor = 0.65) %>%   # Filter
#  pivot_wider(names_from = "Strain.Name",                                                 # Set back to wide format
#              values_from = "Protein.Intensity") %>%
#  as.data.frame() %>%
#  set_column_as_rownames("Precursor.Id")
#sum(is.na(protein_mat))
#sum(is.na(protein_mat))/(ncol(protein_mat)*nrow(protein_mat))
# Run differential expression analysis
## I am not sure how to do this! Should I check DE for all strains w.r.t. to a single baseline one? Or should I do it separately for each culture method (pellet, liquid, liquid+fluconazole)??? For now I am going to run it once for all strains with C0L (lab strain, passage 0, liquid media) as a reference and see what happens
de_analysis_results <- de_analysis(raw_data = protein_mat$y.protein,
metadata = metadata,
method = "limpa",
strain_name_column = "Strain.Name",
sample_name_column = "Sample.Name",
reference_strain = "C0L")
da <- de_analysis_results$DE_df
sum(da$diffexpressed_adjusted != "Not_significant")
lfc_threshold <- 0.5
alpha <- 0.05
responsiveness <- da %>%
group_by(Strain.Name) %>%
summarise(nDEP = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha, na.rm = T),
Up_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Up_regulated", na.rm = T),
Down_regulated_adjusted = sum(abs(logFC) >= lfc_threshold & adj.P.Val <= alpha & diffexpressed_adjusted == "Down_regulated", na.rm = T),
Up_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Up_regulated", na.rm = T),
Down_regulated_non_adjusted = sum(abs(logFC) >= lfc_threshold & P.Value <= alpha & diffexpressed_non_adjusted == "Down_regulated", na.rm = T),
Replicate_num = mean(Replicate_num))
View(responsiveness)
