{"frames":[{"func":"protein_summarize(raw_data = raw_prec_data, protein_ids = precursor_protein_correspondence$Protein.Ids, \n    method = \"limpa\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"dpcQuant(raw_data, protein_ids, dpc = dpcfit)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"dpcQuant.default(raw_data, protein_ids, dpc = dpcfit)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"dpcQuant(z, protein.id = protein.id, dpc = dpc, dpc.slope = dpc.slope, \n    verbose = verbose, chunk = chunk, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"dpcQuant.EList(z, protein.id = protein.id, dpc = dpc, dpc.slope = dpc.slope, \n    verbose = verbose, chunk = chunk, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"dpcQuantHyperparam(y, protein.id = protein.id, dpc.slope = dpc[2], \n    ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"proteinResVarFromCompletePeptideData(yComplete, protein.id = protein.id, \n    reorder = FALSE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(\"NAs not allowed in protein.id\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in proteinResVarFromCompletePeptideData(yComplete, protein.id = protein.id,  : \n  NAs not allowed in protein.id\n"}