location_to_save = "/home/alvaro/MyStuff/ToleranceEvo_Wenxi/Output/Plots/filtering/pca/",
save_as = "png")
# Save this one to test the modifications I'm making to the PCA function
saveRDS(data_filtered_Q_wide_complete, "/home/alvaro/MyStuff/data_filtered_Q_wide_complete.rds")
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(dplyr)
library(readODS)
library(kableExtra)
library(gridExtra)
library(ggplot2)
library(glue)
library(gt)
library(ggvenn)
library(ggrepel)
#library(diann)
library(ggpubr)
library(forcats)
library(tidyr)
library(helperfunctions)
#source("/data/cephfs-1/work/groups/ralser/users/algo12_c/helperfunctions/helperfunctions.R")
# By Strain.Type
do_pca(data_filtered_Q_wide_complete,
metadata,
metadata_column_for_annotation = "Strain.Type",
metadata_column_for_sample_name = "Sample.Name",
location_to_save = "/home/alvaro/MyStuff/ToleranceEvo_Wenxi/Output/Plots/filtering/pca/",
save_as = "png")
# By Passage
do_pca(data_filtered_Q_wide_complete,
metadata,
metadata_column_for_annotation = "Passage",
metadata_column_for_sample_name = "Sample.Name",
location_to_save = "/home/alvaro/MyStuff/ToleranceEvo_Wenxi/Output/Plots/filtering/pca/",
save_as = "png")
# By Treatment
do_pca(data_filtered_Q_wide_complete,
metadata,
metadata_column_for_annotation = "Treatment",
metadata_column_for_sample_name = "Sample.Name",
location_to_save = "/home/alvaro/MyStuff/ToleranceEvo_Wenxi/Output/Plots/filtering/pca/",
save_as = "png")
# By injection order - NEED TO FIX THE PCA FUNCTION SO THAT IT ACCEPTS CONTINUOUS COLORING VARIABLES
do_pca(data_filtered_Q_wide_complete,
metadata,
metadata_column_for_annotation = "Injection",
metadata_column_for_sample_name = "Sample.Name",
location_to_save = "/home/alvaro/MyStuff/ToleranceEvo_Wenxi/Output/Plots/filtering/pca/",
save_as = "png")
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(dplyr)
library(readODS)
library(kableExtra)
library(gridExtra)
library(ggplot2)
library(glue)
library(gt)
library(ggvenn)
library(ggrepel)
#library(diann)
library(ggpubr)
library(forcats)
library(tidyr)
library(helperfunctions)
#source("/data/cephfs-1/work/groups/ralser/users/algo12_c/helperfunctions/helperfunctions.R")
# By Strain.Type
do_pca(data_filtered_Q_wide_complete,
metadata,
metadata_column_for_annotation = "Strain.Type",
metadata_column_for_sample_name = "Sample.Name",
location_to_save = "/home/alvaro/MyStuff/ToleranceEvo_Wenxi/Output/Plots/filtering/pca/",
save_as = "png")
# By Passage
do_pca(data_filtered_Q_wide_complete,
metadata,
metadata_column_for_annotation = "Passage",
metadata_column_for_sample_name = "Sample.Name",
location_to_save = "/home/alvaro/MyStuff/ToleranceEvo_Wenxi/Output/Plots/filtering/pca/",
save_as = "png")
# By Treatment
do_pca(data_filtered_Q_wide_complete,
metadata,
metadata_column_for_annotation = "Treatment",
metadata_column_for_sample_name = "Sample.Name",
location_to_save = "/home/alvaro/MyStuff/ToleranceEvo_Wenxi/Output/Plots/filtering/pca/",
save_as = "png")
# By injection order - NEED TO FIX THE PCA FUNCTION SO THAT IT ACCEPTS CONTINUOUS COLORING VARIABLES
do_pca(data_filtered_Q_wide_complete,
metadata,
metadata_column_for_annotation = "Injection",
metadata_column_for_sample_name = "Sample.Name",
location_to_save = "/home/alvaro/MyStuff/ToleranceEvo_Wenxi/Output/Plots/filtering/pca/",
save_as = "png")
View(metadata_na_count)
# Boxplot for missingness per strain
ggplot(data = metadata_na_count, aes(x = Strain.Name, y = Completeness, fill = Strain.Name)) +
geom_boxplot() +
theme_light() +
scale_fill_viridis_d()
# Boxplot for missingness per strain
ggplot(data = metadata_na_count, aes(x = Strain.Name, y = Completeness, fill = Strain.Name)) +
geom_boxplot() +
theme_light() +
scale_fill_viridis_d() +
labs(x = NULL,
y = "Completeness",
title = "Completeness per condition") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "none")
ggplot(data = metadata_na_count, aes(x = Strain.Name, y = Completeness, fill = Passage)) +
geom_boxplot() +
theme_light() +
scale_fill_viridis_d() +
labs(x = NULL,
y = "Completeness",
title = "Completeness per condition") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# Transform to wide format so I can count the NAs per sample
data_filtered_Q_wide <- data_filtered_Q %>%
dplyr::select(Sample.Name, Precursor.Normalised, Precursor.Id) %>%
pivot_wider(values_from = Precursor.Normalised,
names_from = Sample.Name) %>%
as.data.frame() %>%
set_column_as_rownames(column_name = "Precursor.Id")
# Bring this information of NAs per sample (as well as this as a ratio over the identified precursors) as new columns to the dataset
na_count <- apply(data_filtered_Q_wide, 2, function(x) sum(is.na(x)))
na_count_df <- data.frame(colnames(data_filtered_Q_wide), na_count)
colnames(na_count_df) <- c("Sample.Name", "NA_count")
na_count_df <- na_count_df %>%
dplyr::mutate(Completeness = 1 - (NA_count/nrow(data_filtered_Q_wide)))
# Get the mean intensity column (just mean of Precursor.Normalised after grouping by Sample.Name)
data_filtered_Q_test <- left_join(data_filtered_Q, na_count_df, by = "Sample.Name") %>%
group_by(Sample.Name) %>%
dplyr::mutate(mean_Intensity = log2(mean(Precursor.Normalised))) %>%
ungroup()
# Plot completeness vs. mean intensity - colored by injection order
ggplot(data = data_filtered_Q_test, aes(x = mean_Intensity, y = Completeness, col = Injection)) +
geom_point(size = 2) +
theme_light() +
scale_color_viridis_c() +
xlab("mean Intensity")
# How about completeness vs. injection order? - didn't realize this information was already in the coloring of the previous plot
metadata_na_count <- left_join(metadata, na_count_df, by = "Sample.Name")
ggplot(data = metadata_na_count, aes(x = Injection, y = NA_count)) +
geom_point() +
theme_light()
# Boxplot for mean Intensity per condition
ggplot(data = data_filtered_Q_test, aes(x = Strain.Name, y = mean_Intensity, fill = Strain.Name)) +
geom_boxplot() +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "Mean intensity per sample",
title = "Mean intensity per sample, for all conditions") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "none")
# Boxplot for missingness per strain
ggplot(data = metadata_na_count, aes(x = Strain.Name, y = Completeness, fill = Strain.Name)) +
geom_boxplot() +
theme_light() +
scale_fill_viridis_d() +
labs(x = NULL,
y = "Completeness",
title = "Completeness per condition") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "none")
ggplot(data = metadata_na_count, aes(x = Strain.Name, y = Completeness, fill = Passage)) +
geom_boxplot() +
theme_light() +
scale_fill_viridis_d() +
labs(x = NULL,
y = "Completeness",
title = "Completeness per condition") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = metadata_na_count, aes(x = Strain.Name, y = Completeness, fill = Treatment)) +
geom_boxplot() +
theme_light() +
scale_fill_viridis_d() +
labs(x = NULL,
y = "Completeness",
title = "Completeness per condition") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = metadata_na_count, aes(x = Strain.Name, y = Completeness, fill = Strain.Type)) +
geom_boxplot() +
theme_light() +
scale_fill_viridis_d() +
labs(x = NULL,
y = "Completeness",
title = "Completeness per condition") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# Transform to wide format so I can count the NAs per sample
data_filtered_Q_wide <- data_filtered_Q %>%
dplyr::select(Sample.Name, Precursor.Normalised, Precursor.Id) %>%
pivot_wider(values_from = Precursor.Normalised,
names_from = Sample.Name) %>%
as.data.frame() %>%
set_column_as_rownames(column_name = "Precursor.Id")
# Bring this information of NAs per sample (as well as this as a ratio over the identified precursors) as new columns to the dataset
na_count <- apply(data_filtered_Q_wide, 2, function(x) sum(is.na(x)))
na_count_df <- data.frame(colnames(data_filtered_Q_wide), na_count)
colnames(na_count_df) <- c("Sample.Name", "NA_count")
na_count_df <- na_count_df %>%
dplyr::mutate(Completeness = 1 - (NA_count/nrow(data_filtered_Q_wide)))
# Get the mean intensity column (just mean of Precursor.Normalised after grouping by Sample.Name)
data_filtered_Q_test <- left_join(data_filtered_Q, na_count_df, by = "Sample.Name") %>%
group_by(Sample.Name) %>%
dplyr::mutate(mean_Intensity = log2(mean(Precursor.Normalised))) %>%
ungroup()
# Plot completeness vs. mean intensity - colored by injection order
ggplot(data = data_filtered_Q_test, aes(x = mean_Intensity, y = Completeness, col = Injection)) +
geom_point(size = 2) +
theme_light() +
scale_color_viridis_c() +
xlab("mean Intensity")
# How about completeness vs. injection order? - didn't realize this information was already in the coloring of the previous plot
metadata_na_count <- left_join(metadata, na_count_df, by = "Sample.Name")
ggplot(data = metadata_na_count, aes(x = Injection, y = NA_count)) +
geom_point() +
theme_light()
# Boxplot for mean Intensity per condition -  first per condition, then coloring per each of the 3 variables
ggplot(data = data_filtered_Q_test, aes(x = Strain.Name, y = mean_Intensity, fill = Strain.Name)) +
geom_boxplot() +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "Mean intensity per sample",
title = "Mean intensity per sample, for all conditions") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "none")
ggplot(data = data_filtered_Q_test, aes(x = Strain.Name, y = mean_Intensity, fill = Passage)) +
geom_boxplot() +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "Mean intensity per sample",
title = "Mean intensity per sample, for all conditions") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = data_filtered_Q_test, aes(x = Strain.Name, y = mean_Intensity, fill = Treatment)) +
geom_boxplot() +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "Mean intensity per sample",
title = "Mean intensity per sample, for all conditions") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = data_filtered_Q_test, aes(x = Strain.Name, y = mean_Intensity, fill = Strain.Type)) +
geom_boxplot() +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "Mean intensity per sample",
title = "Mean intensity per sample, for all conditions") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# Boxplot for missingness per strain - first per condition, then coloring per each of the 3 variables
ggplot(data = metadata_na_count, aes(x = Strain.Name, y = Completeness, fill = Strain.Name)) +
geom_boxplot() +
theme_light() +
scale_fill_viridis_d() +
labs(x = NULL,
y = "Completeness",
title = "Completeness per condition") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "none")
ggplot(data = metadata_na_count, aes(x = Strain.Name, y = Completeness, fill = Passage)) +
geom_boxplot() +
theme_light() +
scale_fill_viridis_d() +
labs(x = NULL,
y = "Completeness",
title = "Completeness per condition") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = metadata_na_count, aes(x = Strain.Name, y = Completeness, fill = Treatment)) +
geom_boxplot() +
theme_light() +
scale_fill_viridis_d() +
labs(x = NULL,
y = "Completeness",
title = "Completeness per condition") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = metadata_na_count, aes(x = Strain.Name, y = Completeness, fill = Strain.Type)) +
geom_boxplot() +
theme_light() +
scale_fill_viridis_d() +
labs(x = NULL,
y = "Completeness",
title = "Completeness per condition") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
View(data_filtered_Q_test)
na_count <- apply(data_filtered_Q_wide, 1, function(x) sum(is.na(x)))
na_count_df <- data.frame(rownames(data_filtered_Q_wide), na_count)
colnames(na_count_df) <- c("Precursor.Id", "NA_count")
na_count_df <- na_count_df %>%
dplyr::mutate(Completeness = 1 - (NA_count/nrow(data_filtered_Q_wide)))
View(na_count_df)
# Get the mean intensity column (just mean of Precursor.Normalised after grouping by Precursor.Id)
data_filtered_Q_test <- left_join(data_filtered_Q, na_count_df, by = "Precursor.Id") %>%
group_by(Precursor.Id) %>%
dplyr::mutate(mean_Intensity = log2(mean(Precursor.Normalised))) %>%
ungroup()
ggplot(data = data_filtered_Q_test, aes(x = mean_Intensity, y = Completeness, col = Injection)) +
geom_point() +
theme_light() +
scale_color_viridis_c()
ggplot(data = data_filtered_Q_test, aes(x = mean_Intensity, y = Completeness, col = Injection)) +
geom_point(size = 0.1) +
theme_light() +
scale_color_viridis_c()
View(data_filtered_Q_wide)
# Grab NAs per precursor and bring that information to the long-format DIA-NN report
na_count <- apply(data_filtered_Q_wide, 1, function(x) sum(is.na(x)))
na_count_df <- data.frame(rownames(data_filtered_Q_wide), na_count)
colnames(na_count_df) <- c("Precursor.Id", "NA_count")
na_count_df <- na_count_df %>%
dplyr::mutate(Completeness = 1 - (NA_count/ncol(data_filtered_Q_wide)))
# Get the mean intensity column (just mean of Precursor.Normalised after grouping by Precursor.Id)
data_filtered_Q_test <- left_join(data_filtered_Q, na_count_df, by = "Precursor.Id") %>%
group_by(Precursor.Id) %>%
dplyr::mutate(mean_Intensity = log2(mean(Precursor.Normalised))) %>%
ungroup()
ggplot(data = data_filtered_Q_test, aes(x = mean_Intensity, y = Completeness, col = Injection)) +
geom_point(size = 0.1) +
theme_light() +
scale_color_viridis_c()
ggplot(data = data_filtered_Q_test, aes(x = mean_Intensity, y = Completeness, col = Injection)) +
geom_point(size = 0.3) +
theme_light() +
scale_color_viridis_c()
# Transform to wide format so I can count the NAs per sample
data_filtered_Q_wide <- data_filtered_Q %>%
dplyr::select(Sample.Name, Precursor.Normalised, Precursor.Id) %>%
pivot_wider(values_from = Precursor.Normalised,
names_from = Sample.Name) %>%
as.data.frame() %>%
set_column_as_rownames(column_name = "Precursor.Id")
# Bring this information of NAs per sample (as well as this as a ratio over the identified precursors) as new columns to the dataset
na_count <- apply(data_filtered_Q_wide, 2, function(x) sum(is.na(x)))
na_count_df <- data.frame(colnames(data_filtered_Q_wide), na_count)
colnames(na_count_df) <- c("Sample.Name", "NA_count")
na_count_df <- na_count_df %>%
dplyr::mutate(Completeness = 1 - (NA_count/nrow(data_filtered_Q_wide)))
# Get the mean intensity column (just mean of Precursor.Normalised after grouping by Sample.Name)
data_filtered_Q_test <- left_join(data_filtered_Q, na_count_df, by = "Sample.Name") %>%
group_by(Sample.Name) %>%
dplyr::mutate(mean_Intensity = log2(mean(Precursor.Normalised))) %>%
ungroup()
# Plot completeness vs. mean intensity - colored by injection order
ggplot(data = data_filtered_Q_test, aes(x = mean_Intensity, y = Completeness, col = Injection)) +
geom_point(size = 2) +
theme_light() +
scale_color_viridis_c() +
xlab("mean Intensity")
# How about completeness vs. injection order? - didn't realize this information was already in the coloring of the previous plot
metadata_na_count <- left_join(metadata, na_count_df, by = "Sample.Name")
ggplot(data = metadata_na_count, aes(x = Injection, y = NA_count)) +
geom_point() +
theme_light()
# Boxplot for mean Intensity per condition -  first per condition, then coloring per each of the 3 variables
ggplot(data = data_filtered_Q_test, aes(x = Strain.Name, y = mean_Intensity, fill = Strain.Name)) +
geom_boxplot() +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "Mean intensity per sample",
title = "Mean intensity per sample, for all conditions") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "none")
ggplot(data = data_filtered_Q_test, aes(x = Strain.Name, y = mean_Intensity, fill = Passage)) +
geom_boxplot() +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "Mean intensity per sample",
title = "Mean intensity per sample, for all conditions") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = data_filtered_Q_test, aes(x = Strain.Name, y = mean_Intensity, fill = Treatment)) +
geom_boxplot() +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "Mean intensity per sample",
title = "Mean intensity per sample, for all conditions") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = data_filtered_Q_test, aes(x = Strain.Name, y = mean_Intensity, fill = Strain.Type)) +
geom_boxplot() +
scale_fill_viridis_d() +
theme_light() +
labs(x = NULL,
y = "Mean intensity per sample",
title = "Mean intensity per sample, for all conditions") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
# Boxplot for missingness per strain - first per condition, then coloring per each of the 3 variables
ggplot(data = metadata_na_count, aes(x = Strain.Name, y = Completeness, fill = Strain.Name)) +
geom_boxplot() +
theme_light() +
scale_fill_viridis_d() +
labs(x = NULL,
y = "Completeness",
title = "Completeness per condition") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "none")
ggplot(data = metadata_na_count, aes(x = Strain.Name, y = Completeness, fill = Passage)) +
geom_boxplot() +
theme_light() +
scale_fill_viridis_d() +
labs(x = NULL,
y = "Completeness",
title = "Completeness per condition") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = metadata_na_count, aes(x = Strain.Name, y = Completeness, fill = Treatment)) +
geom_boxplot() +
theme_light() +
scale_fill_viridis_d() +
labs(x = NULL,
y = "Completeness",
title = "Completeness per condition") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = metadata_na_count, aes(x = Strain.Name, y = Completeness, fill = Strain.Type)) +
geom_boxplot() +
theme_light() +
scale_fill_viridis_d() +
labs(x = NULL,
y = "Completeness",
title = "Completeness per condition") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
View(data_filtered_Q_test)
View(data_filtered_Q)
data_filtered_Q_no_outlier <- data_filtered_Q %>%
dplyr::filter(Sample.Name != "I7F_2")
View(stats_file)
ggplot(data = stats_file, aes(x = Precursors.Identified)) +
geom_histogram() +
theme_light()
ggplot(data = stats_file, aes(x = Precursors.Identified)) +
geom_histogram(col = "black", fill = "grey") +
theme_light()
ggplot(data = stats_file, aes(x = MS1.Signal)) +
geom_histogram(col = "black", fill = "grey") +
theme_light()
# Run filtering
data_filtered_TIC <- filter_z_score_tic(data_filtered_Q_no_outlier,
stats_file,
label_outliers = T)
data_filtered_number_of_id_precursors <- data_filtered_Q_no_outlier
# Remove already unnecessary version of the report (2 steps ago)
rm(data_filtered_quantified)
# Filter
data_filtered_replicate_num <- filter_samples_per_strain(data_filtered_number_of_id_precursors,
min_samples_per_strain)
new_row <- get_new_row_for_log(5,
"Filtered strains with less than 3 replicates present",
step_name = "Replicate number",
data_filtered_number_of_id_precursors,
data_filtered_replicate_num)
changes_log <- changes_log %>%
add_row(new_row)
# Going to try Luise's approach - remove precursors which are measured in <50% of the samples, unless they are expressed in >65% of the samples in one condition
# Set up the filter
filterSF <- data_filtered_replicate_num %>%
dplyr::group_by(Precursor.Id, Strain.Name) %>%
dplyr::summarise(count_strain = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(Strain.Name) %>%
dplyr::mutate(maxCount_strain=max(count)) %>%
dplyr::ungroup() %>%
dplyr::group_by(Precursor.Id) %>%
dplyr::summarise(count_total = n())
# Going to try Luise's approach - remove precursors which are measured in <50% of the samples, unless they are expressed in >65% of the samples in one condition
# Set up the filter
filterSF <- data_filtered_replicate_num %>%
dplyr::group_by(Precursor.Id, Strain.Name) %>%
dplyr::summarise(count_strain = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(Strain.Name) %>%
dplyr::mutate(maxCount_strain=max(count_strain)) %>%
dplyr::ungroup() %>%
dplyr::group_by(Precursor.Id) %>%
dplyr::summarise(count_total = n())
# Apply filter
data_filtered_prec_per_strain_2 <- data_filtered_replicate_num %>%
dplyr::left_join(filterSF) %>%
dplyr::filter(count_strain >= percentage_of_samples_per_precursor*maxCount_strain | count_total > 0.5*length(unique(data_filtered_replicate_num$File.Name))) %>%
dplyr::select(-c(count, maxCount))
View(filterSF)
filterSF <- data_filtered_replicate_num %>%
dplyr::group_by(Precursor.Id, Strain.Name) %>%
dplyr::summarise(count_strain = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(Strain.Name) %>%
dplyr::mutate(maxCount_strain=max(count_strain)) %>%
dplyr::ungroup()
data_filtered_replicate_num <- left_join(data_filtered_replicate_num, filterSF)
filterSF <- data_filtered_replicate_num  %>%
dplyr::group_by(Precursor.Id) %>%
dplyr::summarise(count_total = n())
data_filtered_replicate_num <- left_join(data_filtered_replicate_num, filterSF)
# Apply filter
data_filtered_prec_per_strain_2 <- data_filtered_replicate_num %>%
dplyr::filter(count_strain >= percentage_of_samples_per_precursor*maxCount_strain | count_total > 0.5*length(unique(data_filtered_replicate_num$File.Name))) %>%
dplyr::select(-c(count, maxCount))
# Apply filter
data_filtered_prec_per_strain_2 <- data_filtered_replicate_num %>%
dplyr::filter(count_strain >= percentage_of_samples_per_precursor*maxCount_strain | count_total > 0.5*length(unique(data_filtered_replicate_num$File.Name))) #%>%
nrow(data_filtered_replicate_num)
nrow(data_filtered_prec_per_strain_2)
data_filtered_prec_per_strain <- remove_uncommon_precursors_per_strain(data_filtered_replicate_num,
percentage_of_samples_per_precursor)
# Compare results
print(glue("Number of unique precursor IDs before filtering: {length(unique(data_filtered_replicate_num$Precursor.Id))}"))
print(glue("Number of unique precursor IDs before filtering: {length(unique(data_filtered_replicate_num$Precursor.Id))}"))
print(glue("Number of unique precursor IDs after filtering old: {length(unique(data_filtered_prec_per_strain$Precursor.Id))}"))
print(glue("Number of unique precursor IDs after filtering new: {length(unique(data_filtered_prec_per_strain_2$Precursor.Id))}"))
