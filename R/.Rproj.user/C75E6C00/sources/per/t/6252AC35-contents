---
title: "ToleranceEvo_main"
author: "Álvaro Gómez Pérez"
date: "2025-07-14"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


Libraries
```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
library(data.table)
library(limpa)
library(helperfunctions)
library(preprocessCore)
library(proDA)
```

Set up
```{r}
working_from <- "charite"

if (working_from == "home") {
  base_dir = "/home/alvaro/MyStuff/"
} else
  if (working_from == "charite") {
    base_dir = "C:/MyStuff/"
  }
```


Load data
```{r}
# Precursor data wide format
raw_prec_data <- as.matrix(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/Preprocessing_steps/report_wide_filtered_norm_drift_corrected_log2.csv", sep="")), rownames = 1)

# Metadata
metadata <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/metadata/metadata_processed.txt", sep="")))

# Correspondence between precursor IDs and protein IDs (UniProt) 
precursor_protein_correspondence <- as.data.frame(fread(paste(base_dir, "ToleranceEvo_Wenxi/Data/Preprocessing_steps/precursor_protein_correspondence.tsv", sep="")))

# UniProt dataframe
uniprot_db <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/databases/uniprotkb_proteome_UP000002311_2025_05_24.tsv", sep="")))
```


TEMPORARY - DELETE - CHECK WHAT'S UP WITH NAS
```{r}
rows_with_only_NAs <- apply(raw_prec_data, 1, function(x) sum(is.na(x)) == length(x), simplify = T)
rows_with_only_NAs <- as.vector(rows_with_only_NAs)
sum(rows_with_only_NAs)
fully_missing_precursors <- rownames(raw_prec_data)[rows_with_only_NAs]

test <- raw_prec_data %>%
  dplyr::select(contains("I0L")) %>%
  dplyr::filter(rownames(raw_prec_data) %in% fully_missing_precursors)


# Debug DE function
raw_data = protein_mat
metadata = metadata
method = "proDA"
strain_name_column = "Strain.Name"
sample_name_column = "Sample.Name"
reference_strain = "C0L"
N = 10
lfc_threshold = 1
alpha = 0.05
```





# 1. Differential expression analysis
Performed with limpa. Filtering and pre-processing at the precursor level was done in the cluster, here I start from the processed (filtered, normalized, drift corrected, non-imputed) data at precursor level in wide format (precursors in rows, samples in columns), summarize to protein level and perform DE analysis, both with limpa
```{r}
# Prepare protein ID vector matching the precursor order in the rows of the raw data
## Set the order based on that of the rows of the precursor raw data
precursor_protein_correspondence <- precursor_protein_correspondence %>%
  dplyr::filter(Precursor.Id %in% rownames(raw_prec_data))
precursor_protein_correspondence <- precursor_protein_correspondence[match(rownames(raw_prec_data), precursor_protein_correspondence$Precursor.Id),]

# Run summarization
protein_mat <- protein_summarize(raw_data = raw_prec_data,
                                 protein_ids = precursor_protein_correspondence$Protein.Ids,
                                 method = "limpa")

# Remove proteins which are present in less than 65% of the samples per strain
protein_mat$Precursor.Id <- rownames(protein_mat)
protein_mat <- pivot_longer(protein_mat,                                                  # Switch to longer format for filtering
                                 cols = !Precursor.Id,
                                 names_to = "Strain.Name",
                                 values_to = "Protein.Intensity") %>%
  dplyr::filter(!is.na(Protein.Intensity)) %>%                                            # Remove rows with NAs, otherwise this filtering doesn't work (it's based on the                                                                                               row being present or not, not on its contents)
  remove_uncommon_precursors_per_strain(percentage_of_samples_per_precursor = 0.65) %>%   # Filter
  pivot_wider(names_from = "Strain.Name",                                                 # Set back to wide format
              values_from = "Protein.Intensity") %>%
  as.data.frame() %>%
  set_column_as_rownames("Precursor.Id") 
sum(is.na(protein_mat))
sum(is.na(protein_mat))/(ncol(protein_mat)*nrow(protein_mat))


# Run differential expression analysis
## I am not sure how to do this! Should I check DE for all strains w.r.t. to a single baseline one? Or should I do it separately for each culture method (pellet, liquid, liquid+fluconazole)??? For now I am going to run it once for all strains with C0L (lab strain, passage 0, liquid media) as a reference and see what happens
de_analysis_results <- de_analysis(raw_data = protein_mat,
                                   metadata = metadata,
                                   method = "limma",
                                   strain_name_column = "Strain.Name", 
                                   sample_name_column = "Sample.Name", 
                                   reference_strain = "C0L")
```







```{r}
dpcfit <- limpa::dpc(raw_prec_data)

# Checks
sum(is.infinite(raw_prec_data))
summary(as.vector(raw_prec_data))
summary(apply(raw_prec_data, 1, var, na.rm = TRUE))  # check rows
summary(apply(raw_prec_data, 2, var, na.rm = TRUE))  # check columns
mean(raw_prec_data == 0, na.rm = TRUE)

hist(protein_mat)
```





































